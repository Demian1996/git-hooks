#!/usr/bin/env node
/* eslint-disable no-undef */

const process = require('process');
const { exec } = require('child_process');
const path = require('path');

const repositoryPath = path.resolve(__dirname, '../../');
const AbstractHook = require(path.resolve(repositoryPath, './.git/hooks/common/AbstractHook.js'));
const EslintMiddleware = require(path.resolve(
  repositoryPath,
  './.git/hooks/common/EslintMiddleware.js'
));
const { logger } = require(path.resolve(repositoryPath, './.git/hooks/common/log.js'));

class PreCommitHook extends AbstractHook {
  constructor() {
    super();
  }

  getHookName() {
    return super.getHookName(__filename);
  }

  run() {
    // 执行 git 的命令
    this._getDiffFileList()
      .then((fileList) => {
        this._lintFileList(fileList);
      })
      .catch((error) => {
        logger.error(error);
        process.exit(1);
      });
  }

  _getDiffFileList() {
    return new Promise((resolve, reject) => {
      exec('git diff --cached --diff-filter=ACMR --name-only', (error, stdout) => {
        if (error) {
          reject(`exec error: ${error}`);
        }
        // 对返回结果进行处理，拿到要检查的文件列表
        const diffFileList = stdout
          .split('\n')
          .filter((diffFile) => /(\.js|\.jsx|\.ts|\.tsx)(\n|$)/gi.test(diffFile));

        resolve(diffFileList);
      });
    });
  }
  _lintFileList(fileList) {
    const eslint = new EslintMiddleware({ fileList, logger });
    return eslint.lintFiles().then(eslint.output.bind(eslint));
  }
}

const hook = new PreCommitHook();
hook.run();
